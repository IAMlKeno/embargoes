<?php

/**
 * @file
 * Hook implementations.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_node_access().
 */
function embargoes_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  return \Drupal::service('embargoes.node_access')->isActivelyEmbargoed($node, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function embargoes_media_access(EntityInterface $media, $operation, AccountInterface $account) {
  return \Drupal::service('embargoes.media_access')->isActivelyEmbargoed($media, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function embargoes_file_access(EntityInterface $file, $operation, AccountInterface $account) {
  return \Drupal::service('embargoes.file_access')->isActivelyEmbargoed($file, $account);
}

/**
 * Implements hook_node_view().
 */
function embargoes_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $node_embargo = \Drupal::service('embargoes.node_access');
  $ip_url = $node_embargo->getIpEmbargoedRedirectUrl($entity);
  if ($ip_url) {
    $response = new RedirectResponse($ip_url);
    $response->send();
  }
  else {
    $node_embargo->setEmbargoMessage($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function embargoes_media_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $media_embargo = \Drupal::service('embargoes.media_access');
  $ip_url = $media_embargo->getIpEmbargoedRedirectUrl($entity);
  if ($ip_url) {
    $response = new RedirectResponse($ip_url);
    $response->send();
  }
  else {
    $media_embargo->setEmbargoMessage($entity);
  }
}

/**
 * Implements hook_file_download().
 */
function embargoes_file_download($uri) {
  $files = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->loadByProperties(['uri' => $uri]);
  $file = reset($files);
  $file_embargo = \Drupal::service('embargoes.file_access');
  $ip_url = $file_embargo->getIpEmbargoedRedirectUrl($file);
  if ($ip_url) {
    $response = new RedirectResponse($ip_url);
    $response->send();
  }
}
