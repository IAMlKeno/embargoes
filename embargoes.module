<?php

use \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * @file
 * Contains embargoes.module.
 */

/**
 * Implements hook_node_view().
 */
//function embargoes_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
//}

/**
 * Implements hook_node_access().
 */
function embargoes_node_access(\Drupal\node\NodeInterface $node, $operation, \Drupal\Core\Session\AccountInterface $account) {
  $nids = array($node->id());
  $ip = \Drupal::request()->getClientIp();
  $embargoes = \Drupal::service('embargoes.embargoes')->getActiveNodeEmbargoesByNids($nids, $ip, $account);
  if (!empty($embargoes)) {
    $access = \Drupal\Core\Access\AccessResult::forbidden();
  }
  else {
    $access = \Drupal\Core\Access\AccessResult::neutral();
  }

  return $access;
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function embargoes_file_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account){
  $relationships = file_get_file_references($entity);
  if (!$relationships) {
    $access = \Drupal\Core\Access\AccessResult::neutral();
  }
  else {
    foreach ($relationships as $relationship) {
      if (!$relationship) {
        $access = \Drupal\Core\Access\AccessResult::neutral();
      }
      else {
        foreach ($relationship as $key => $value) {
          switch ($key) {
            case 'node':
              $nids = array(array_keys($subkey)[0]);
              break;
            case 'media':
              $mid = array_keys($value)[0];
              $nids = \Drupal::service('embargoes.embargoes')->getMediaParentNids($mid);
              break;
          }
        }
      }
    }
  }
  $ip = \Drupal::request()->getClientIp();
  $embargoes = \Drupal::service('embargoes.embargoes')->getActiveEmbargoesByNids($nids, $ip, $account);
  if (!empty($embargoes)) {
    $access = \Drupal\Core\Access\AccessResult::forbidden();
  }
  else {
    $access = \Drupal\Core\Access\AccessResult::neutral();
  }
  return $access;
}
