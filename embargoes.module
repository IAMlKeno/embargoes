<?php

/**
 * @file
 * Hook implementations.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function embargoes_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  return \Drupal::service('embargoes.node_access')->isActivelyEmbargoed($node, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function embargoes_media_access(EntityInterface $media, $operation, AccountInterface $account) {
  return \Drupal::service('embargoes.media_access')->isActivelyEmbargoed($media, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function embargoes_file_access(EntityInterface $file, $operation, AccountInterface $account) {
  return \Drupal::service('embargoes.file_access')->isActivelyEmbargoed($file, $account);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function embargoes_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::service('embargoes.node_access')->setEmbargoMessage($node);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function embargoes_media_view(array &$build, EntityInterface $media, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::service('embargoes.media_access')->setEmbargoMessage($media);
}

/**
 * Implements hook_theme().
 */
function embargoes_theme($existing, $type, $theme, $path) {
  return [
    'embargoes_ip_access_denied' => [
      'template' => 'embargoes-ip-access-denied',
      'variables' => [
        'requested_resource' => NULL,
        // Indexed array of ranges containing a 'proxy URL' (NULL if none exist)
        // and a display 'label'.
        'ranges' => [],
        'contact_email' => NULL,
      ],
    ],
  ];
}
